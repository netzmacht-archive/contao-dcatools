<?php

/**
 * @package    dev
 * @author     David Molineus <david.molineus@netzmacht.de>
 * @copyright  2014 netzmacht creative David Molineus
 * @license    LGPL 3.0
 * @filesource
 *
 */

namespace DcaTools\Definition\Permission\Condition;


use ContaoCommunityAlliance\DcGeneral\Data\ModelInterface;
use ContaoCommunityAlliance\DcGeneral\EnvironmentInterface;
use DcaTools\Definition\AbstractGenericCondition;
use DcaTools\Definition\Permission\Context;
use DcaTools\Definition\Permission\PermissionCondition;
use DcaTools\User\User;


/**
 * Class AbstractCondition
 * @package DcaTools\Definition\Permission\Condition
 */
abstract class AbstractCondition extends AbstractGenericCondition implements PermissionCondition
{
	protected $config = array(
		'context' => null,
	);


	/**
	 * @param array $config
	 * @param array $filter
	 */
	function __construct(array $config = array(), array $filter = array())
	{
		if(!isset($config['context'])) {
			$config['context'] = null;
		}

		parent::__construct($config, $filter); // TODO: Change the autogenerated stub
	}


	/**
	 * @return string
	 */
	public function getError()
	{
		if(!isset($this->config['error'])) {
			$class = get_called_class();
			$class = substr($class, strrpos($class, '\\')+1);

			return 'Permission denied: ' . $class  . ' failed';
		}

		return $this->config['error'];
	}


	/**
	 * @param EnvironmentInterface $environment
	 * @param User $user
	 * @param Context $context
	 * @return bool
	 */
	public function match(EnvironmentInterface $environment, User $user, Context $context)
	{
		if($this->filter($environment, $user, $context)) {
			return $this->execute($environment, $user, $context);
		}

		return true;
	}


	/**
	 * Match the filter
	 *
	 * @param EnvironmentInterface $environment
	 * @param User $user
	 * @param Context $context
	 * @return mixed
	 */
	public function filter(EnvironmentInterface $environment, User $user, Context $context)
	{
		$match = null;

		// always match, no further checking
		if($this->filter['always']) {
			$match = true;
			$match = $this->applyFilterInverse($match);

			return $match;
		}

		// check against defined action
		if($match !== false && $this->filter['action']) {
			$match = (in_array($this->getAction($environment), (array)$this->filter['action']));
		}

		// check against request param
		if($match !== false  && $this->filter['param']) {
			$match = $match && $this->checkParamFilter($environment);
		}

		// check against context
		if($match !== false && $this->filter['context']) {
			$match = $context->match($this->filter['context']);
		}

		// check against model property
		if($match !== false && $this->filter['property']) {
			if($context->isListView()) {
				$collection = $context->getCollection();

				foreach($collection as $model) {
					$match = $this->matchPropertyFilter($model);
					$match = $this->applyFilterInverse($match);

					if(!$match) {
						break;
					}
				}

				return $match;
			}
			elseif($this->config['context']) {
				$model = $this->getContextModel($context);
				$match = $this->matchPropertyFilter($model);
			}
		}

		return $this->applyFilterInverse($match);
	}


	/**
	 * @param \DcaTools\Definition\Permission\Context $context
	 * @return ModelInterface
	 */
	protected function getContextModel(Context $context)
	{
		if($context->isParentMode()) {
			return $context->getParent();
		}

		return $context->getModel();
	}


	/**
	 * @param EnvironmentInterface $environment
	 * @return bool|mixed
	 */
	protected function checkParamFilter(EnvironmentInterface $environment)
	{
		$input = $environment->getInputProvider();

		if($this->filter['param_callback']) {
			return call_user_func($this->filter['param_callback'], $input, $this->filter['param'], $this->filter['name']);
		}

		$value = $this->getInputValue($input, $this->filter['param'], $this->filter['name']);
		$state = $this->compare($value, $this->filter['operator'], $this->filter['value']);

		return $state;
	}


	/**
	 * @param EnvironmentInterface $environment
	 * @return mixed
	 */
	protected function getAction(EnvironmentInterface $environment)
	{
		$input = $environment->getInputProvider();

		if($input->hasParameter('key')) {
			return $input->getParameter('key');
		}

		return $input->getParameter('act');
	}

} 